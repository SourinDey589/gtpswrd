(echo_server.c)-------------------------------------------------------------------------------------------------------------
 #include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define BUF_SIZE 1024

int main(int argc, char *argv[]) {
    if (argc != 3) { printf("Usage: %s <IP> <PORT>\n", argv[0]); return 1; }

    int s_sock = socket(AF_INET, SOCK_STREAM, 0);
    struct sockaddr_in s_addr = { .sin_family = AF_INET, .sin_port = htons(atoi(argv[2])), .sin_addr.s_addr = inet_addr(argv[1]) };
    bind(s_sock, (struct sockaddr *)&s_addr, sizeof(s_addr));
    listen(s_sock, 5);

    printf("Server listening on %s:%s\n", argv[1], argv[2]);
    int c_sock;
    char buf[BUF_SIZE];
    while ((c_sock = accept(s_sock, NULL, NULL))) {
        int len = recv(c_sock, buf, BUF_SIZE - 1, 0);
        if (len > 0) send(c_sock, buf, len, 0);
        close(c_sock);
    }
    close(s_sock);
    return 0;
}

(echo_client.c)-----------------------------------------------------------------------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define BUF_SIZE 1024

int main(int argc, char *argv[]) {
    if (argc != 4) { printf("Usage: %s <IP> <PORT> <MESSAGE>\n", argv[0]); return 1; }

    int c_sock = socket(AF_INET, SOCK_STREAM, 0);
    struct sockaddr_in s_addr = { .sin_family = AF_INET, .sin_port = htons(atoi(argv[2])), .sin_addr.s_addr = inet_addr(argv[1]) };
    connect(c_sock, (struct sockaddr *)&s_addr, sizeof(s_addr));

    send(c_sock, argv[3], strlen(argv[3]), 0);

    char buf[BUF_SIZE] = {0};
    int len = recv(c_sock, buf, BUF_SIZE - 1, 0);
    if (len > 0) printf("Echo: %s\n", buf);

    close(c_sock);
    return 0;
}

